{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":976879,"sourceType":"datasetVersion","datasetId":533871}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/many37/robertamodel-fake-job-post-prediction-fe?scriptVersionId=178201989\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Importing libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-17T12:20:28.511501Z","iopub.execute_input":"2024-05-17T12:20:28.512167Z","iopub.status.idle":"2024-05-17T12:20:30.625856Z","shell.execute_reply.started":"2024-05-17T12:20:28.512133Z","shell.execute_reply":"2024-05-17T12:20:30.624737Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Visualization and Analysis","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"../input/real-or-fake-fake-jobposting-prediction/fake_job_postings.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:30.628417Z","iopub.execute_input":"2024-05-17T12:20:30.629381Z","iopub.status.idle":"2024-05-17T12:20:31.940482Z","shell.execute_reply.started":"2024-05-17T12:20:30.629341Z","shell.execute_reply":"2024-05-17T12:20:31.939247Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:31.941992Z","iopub.execute_input":"2024-05-17T12:20:31.942407Z","iopub.status.idle":"2024-05-17T12:20:31.983526Z","shell.execute_reply.started":"2024-05-17T12:20:31.942367Z","shell.execute_reply":"2024-05-17T12:20:31.982464Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Missing values","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:31.986874Z","iopub.execute_input":"2024-05-17T12:20:31.987643Z","iopub.status.idle":"2024-05-17T12:20:32.020468Z","shell.execute_reply.started":"2024-05-17T12:20:31.987614Z","shell.execute_reply":"2024-05-17T12:20:32.019189Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.fillna(' ',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:32.021791Z","iopub.execute_input":"2024-05-17T12:20:32.022096Z","iopub.status.idle":"2024-05-17T12:20:32.068023Z","shell.execute_reply.started":"2024-05-17T12:20:32.022069Z","shell.execute_reply":"2024-05-17T12:20:32.066898Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:32.06988Z","iopub.execute_input":"2024-05-17T12:20:32.070285Z","iopub.status.idle":"2024-05-17T12:20:32.077739Z","shell.execute_reply.started":"2024-05-17T12:20:32.07025Z","shell.execute_reply":"2024-05-17T12:20:32.076424Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Distribution of target class","metadata":{}},{"cell_type":"code","source":"sns.countplot(x='fraudulent',data=df)\nplt.title('Distribution of the \"fraudulent\" attribute')\nplt.xlabel('Is the job posting fake? (0 - No, 1 - Yes)')\nplt.ylabel('Number of job postings')\nplt.show()\n#Clearly the data is imbalanced","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:32.079491Z","iopub.execute_input":"2024-05-17T12:20:32.079909Z","iopub.status.idle":"2024-05-17T12:20:32.406906Z","shell.execute_reply.started":"2024-05-17T12:20:32.079872Z","shell.execute_reply":"2024-05-17T12:20:32.405597Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Check if there is any relationship between the target class and employment type","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.countplot(data=df, x='employment_type', hue='fraudulent')\nplt.title('Count of Fraudulent Cases by Employment Type')\nplt.xlabel('Employment Type')\nplt.ylabel('Count')\nplt.legend(title='Fraudulent')\nplt.show()\n#there isn't any so we can remove this","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:32.40825Z","iopub.execute_input":"2024-05-17T12:20:32.408652Z","iopub.status.idle":"2024-05-17T12:20:32.902102Z","shell.execute_reply.started":"2024-05-17T12:20:32.408612Z","shell.execute_reply":"2024-05-17T12:20:32.900946Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Check if there is any relationship between the target class and required experience","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.countplot(data=df, x='required_experience', hue='fraudulent')\nplt.title('Count of Fraudulent Cases by Required Experience')\nplt.xlabel('Required Experience')\nplt.ylabel('Count')\nplt.legend(title='Fraudulent')\nplt.show()\n#there isn't any so we can remove this","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:32.903748Z","iopub.execute_input":"2024-05-17T12:20:32.911893Z","iopub.status.idle":"2024-05-17T12:20:33.38433Z","shell.execute_reply.started":"2024-05-17T12:20:32.911827Z","shell.execute_reply":"2024-05-17T12:20:33.382993Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Check if there is any relationship between the target class and required education","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(30, 18))\nsns.countplot(data=df, x='required_education', hue='fraudulent')\nplt.title('Count of Fraudulent Cases by Required Education')\nplt.xlabel('Required Education')\nplt.ylabel('Count')\nplt.legend(title='Fraudulent')\nplt.show()\n#there isn't any so we can remove this","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:33.385912Z","iopub.execute_input":"2024-05-17T12:20:33.386371Z","iopub.status.idle":"2024-05-17T12:20:34.202881Z","shell.execute_reply.started":"2024-05-17T12:20:33.386331Z","shell.execute_reply":"2024-05-17T12:20:34.201756Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Concatenate data","metadata":{}},{"cell_type":"code","source":"df['text']=df['title']+\" \" + df['department'] + \" \" + df['company_profile'] + \" \" + df['description'] + \" \" + df['requirements'] + \" \" + df['benefits'] + \" \" ","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:34.208883Z","iopub.execute_input":"2024-05-17T12:20:34.209308Z","iopub.status.idle":"2024-05-17T12:20:34.468107Z","shell.execute_reply.started":"2024-05-17T12:20:34.209268Z","shell.execute_reply":"2024-05-17T12:20:34.467165Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"delete_list=['job_id','title','location','telecommuting','has_company_logo','has_questions','department','salary_range','company_profile','description','requirements','benefits','employment_type','required_experience','required_education','industry','function']\n\nfor val in delete_list:\n    del df[val]\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:34.469419Z","iopub.execute_input":"2024-05-17T12:20:34.470031Z","iopub.status.idle":"2024-05-17T12:20:34.48832Z","shell.execute_reply.started":"2024-05-17T12:20:34.469994Z","shell.execute_reply":"2024-05-17T12:20:34.487178Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data cleaning","metadata":{}},{"cell_type":"code","source":"import spacy\nimport re\n\n#Remove newlines, carriage returns, and tabs\ndf['text']=df['text'].str.replace('\\n','')\ndf['text']=df['text'].str.replace('\\r','')\ndf['text']=df['text'].str.replace('\\t','')\n#Remove numerical digits\ndf['text'] = df['text'].apply(lambda x: re.sub(r'[0-9]','',x))\n#Replace special characters with space\ndf['text'] = df['text'].apply(lambda x: re.sub(r'[/(){}\\[\\]\\|@,;.:-]',' ',x))\n#Convert text to lower case\ndf['text']= df['text'].apply(lambda s:s.lower() if type(s) == str else s)\n#Remove extra spaces\ndf['text']=df['text'].str.replace('  ',' ')\n#Remove stop words\nnlp=spacy.load(\"en_core_web_sm\")\ndf['text'] =df['text'].apply(lambda x: ' '.join([word for word in x.split() if nlp.vocab[word].is_stop==False ]))","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:20:34.489676Z","iopub.execute_input":"2024-05-17T12:20:34.490112Z","iopub.status.idle":"2024-05-17T12:21:01.218779Z","shell.execute_reply.started":"2024-05-17T12:20:34.490074Z","shell.execute_reply":"2024-05-17T12:21:01.217503Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:21:01.220188Z","iopub.execute_input":"2024-05-17T12:21:01.220738Z","iopub.status.idle":"2024-05-17T12:21:01.233092Z","shell.execute_reply.started":"2024-05-17T12:21:01.220684Z","shell.execute_reply":"2024-05-17T12:21:01.231939Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Lemmatization ","metadata":{}},{"cell_type":"code","source":"nlp = spacy.load(\"en_core_web_sm\")\n\ndef lemmatize_text(text):\n    doc = nlp(text)\n    return \" \".join([token.lemma_ for token in doc])\n\ndf['text'] = df['text'].apply(lemmatize_text)\n\nprint(df.head())","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:21:01.234396Z","iopub.execute_input":"2024-05-17T12:21:01.234855Z","iopub.status.idle":"2024-05-17T12:34:46.444392Z","shell.execute_reply.started":"2024-05-17T12:21:01.23482Z","shell.execute_reply":"2024-05-17T12:34:46.443389Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Word clouds","metadata":{}},{"cell_type":"code","source":"from wordcloud import WordCloud\n\nnon_fraudulent_text = ' '.join(text for text in df[df['fraudulent'] == 0]['text'])\nfraudulent_text = ' '.join(text for text in df[df['fraudulent'] == 1]['text'])\n\nwordcloud_non_fraudulent = WordCloud(width=800, height=400, background_color='black').generate(non_fraudulent_text)\n\nwordcloud_fraudulent = WordCloud(width=800, height=400, background_color='black').generate(fraudulent_text)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\n\nax1.imshow(wordcloud_non_fraudulent, interpolation='bilinear')\nax1.axis('off')\nax1.set_title('Non-Fraudulent Job Postings')\n\nax2.imshow(wordcloud_fraudulent, interpolation='bilinear')\nax2.axis('off')\nax2.set_title('Fraudulent Job Postings')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:34:46.447707Z","iopub.execute_input":"2024-05-17T12:34:46.448048Z","iopub.status.idle":"2024-05-17T12:35:17.885597Z","shell.execute_reply.started":"2024-05-17T12:34:46.448021Z","shell.execute_reply":"2024-05-17T12:35:17.884582Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Tokenization and padding for DistilRoBERT","metadata":{}},{"cell_type":"code","source":"import torch\nfrom transformers import RobertaModel, RobertaTokenizer\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:39:45.317357Z","iopub.execute_input":"2024-05-17T12:39:45.3178Z","iopub.status.idle":"2024-05-17T12:39:45.324561Z","shell.execute_reply.started":"2024-05-17T12:39:45.317769Z","shell.execute_reply":"2024-05-17T12:39:45.323365Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from transformers import RobertaForSequenceClassification, Trainer, TrainingArguments\nfrom datasets import Dataset\n\n# Załadowanie tokenizera\nmodel_checkpoint = \"distilroberta-base\"\ntokenizer = RobertaTokenizer.from_pretrained(model_checkpoint)\n\n# Funkcja do tokenizacji\ndef tokenize_function(examples):\n    return tokenizer(examples['text'], padding=\"max_length\", truncation=True, max_length=128)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:37:07.288094Z","iopub.execute_input":"2024-05-17T12:37:07.288512Z","iopub.status.idle":"2024-05-17T12:37:09.06038Z","shell.execute_reply.started":"2024-05-17T12:37:07.288481Z","shell.execute_reply":"2024-05-17T12:37:09.059209Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datasets import Dataset, DatasetDict\n\n# Przekształcenie DataFrame do formatu Dataset (jeśli jeszcze nie zostało to zrobione)\ndata = Dataset.from_pandas(df)\n\n# Zakładając, że df zawiera kolumnę 'labels' z etykietami\nif 'labels' not in data.column_names:\n    data = data.add_column('labels', df['fraudulent'].tolist())\n\n# Podział danych na zbiory treningowe i testowe\ntrain_test_split = data.train_test_split(test_size=0.1)  # Dzieli dane na 90% trening i 10% test\ntokenized_datasets = DatasetDict({\n    'train': train_test_split['train'].map(tokenize_function, batched=True),\n    'test': train_test_split['test'].map(tokenize_function, batched=True)\n})\n\n# Obliczenie wag dla klas\nlabels = train_test_split['train']['labels']\nclass_weights = compute_class_weight('balanced', classes=np.unique(labels), y=labels)\nclass_weights_dict = {i : class_weights[i] for i in range(len(class_weights))}","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:40:01.779368Z","iopub.execute_input":"2024-05-17T12:40:01.780252Z","iopub.status.idle":"2024-05-17T12:41:21.357077Z","shell.execute_reply.started":"2024-05-17T12:40:01.780219Z","shell.execute_reply":"2024-05-17T12:41:21.355906Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Evaluation function","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_recall_fscore_support\n\ndef compute_metrics(eval_pred):\n    logits, labels = eval_pred\n    predictions = np.argmax(logits, axis=-1)\n    precision, recall, f1, _ = precision_recall_fscore_support(labels, predictions, average='binary')\n    acc = accuracy_score(labels, predictions)\n    return {\n        \"accuracy\": acc,  # Upewnij się, że ten klucz jest zawsze zwracany\n        \"f1\": f1,\n        \"precision\": precision,\n        \"recall\": recall\n    }","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:41:21.359043Z","iopub.execute_input":"2024-05-17T12:41:21.359395Z","iopub.status.idle":"2024-05-17T12:41:21.366966Z","shell.execute_reply.started":"2024-05-17T12:41:21.359368Z","shell.execute_reply":"2024-05-17T12:41:21.365833Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"DistilRoBERT","metadata":{}},{"cell_type":"code","source":"from accelerate import Accelerator, DataLoaderConfiguration\n\ndataloader_config = DataLoaderConfiguration(dispatch_batches=None, split_batches=False, even_batches=True, use_seedable_sampler=True)\naccelerator = Accelerator(dataloader_config=dataloader_config)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:41:21.368251Z","iopub.execute_input":"2024-05-17T12:41:21.368583Z","iopub.status.idle":"2024-05-17T12:41:21.407067Z","shell.execute_reply.started":"2024-05-17T12:41:21.36854Z","shell.execute_reply":"2024-05-17T12:41:21.405997Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import wandb\nwandb.init(mode=\"offline\")","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:41:21.409233Z","iopub.execute_input":"2024-05-17T12:41:21.409532Z","iopub.status.idle":"2024-05-17T12:41:40.353306Z","shell.execute_reply.started":"2024-05-17T12:41:21.409507Z","shell.execute_reply":"2024-05-17T12:41:40.352047Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from transformers import RobertaForSequenceClassification, Trainer, TrainingArguments\n\n# Argumenty treningowe\ntraining_args = TrainingArguments(\n    output_dir='./results',\n    evaluation_strategy='epoch',\n    save_strategy='epoch',\n    learning_rate=2e-5,\n    per_device_train_batch_size=16,\n    num_train_epochs=3,\n    weight_decay=0.01,\n    load_best_model_at_end=True,\n    metric_for_best_model='accuracy',\n    logging_dir='./logs',\n    logging_steps=10\n)\n\n# Definicja modelu\nmodel = RobertaForSequenceClassification.from_pretrained('distilroberta-base', num_labels=2)\n\n# Trener\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_datasets['train'],\n    eval_dataset=tokenized_datasets['test'],\n    compute_metrics=compute_metrics  \n)\n\n# Trening\ntrainer.train()","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:41:40.356587Z","iopub.execute_input":"2024-05-17T12:41:40.356952Z","iopub.status.idle":"2024-05-17T12:48:57.877217Z","shell.execute_reply.started":"2024-05-17T12:41:40.356924Z","shell.execute_reply":"2024-05-17T12:48:57.876083Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, classification_report\nimport numpy as np\n\n# Przewidywanie etykiet dla zbioru testowego\npredictions = trainer.predict(tokenized_datasets['test'])\npred_labels = np.argmax(predictions.predictions, axis=1)\n\n# Generowanie macierzy pomyłek i raportu klasyfikacji\nconf_matrix = confusion_matrix(tokenized_datasets['test']['labels'], pred_labels)\nprint(\"Macierz pomyłek:\")\nprint(conf_matrix)\nprint(\"\\nRaport klasyfikacji:\")\nprint(classification_report(tokenized_datasets['test']['labels'], pred_labels))","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:48:57.879044Z","iopub.execute_input":"2024-05-17T12:48:57.879455Z","iopub.status.idle":"2024-05-17T12:49:04.87088Z","shell.execute_reply.started":"2024-05-17T12:48:57.879418Z","shell.execute_reply":"2024-05-17T12:49:04.869522Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Using device:\", device)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:49:04.872203Z","iopub.execute_input":"2024-05-17T12:49:04.872536Z","iopub.status.idle":"2024-05-17T12:49:04.880623Z","shell.execute_reply.started":"2024-05-17T12:49:04.872507Z","shell.execute_reply":"2024-05-17T12:49:04.879022Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = model.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:49:04.882447Z","iopub.execute_input":"2024-05-17T12:49:04.882916Z","iopub.status.idle":"2024-05-17T12:49:04.892455Z","shell.execute_reply.started":"2024-05-17T12:49:04.882878Z","shell.execute_reply":"2024-05-17T12:49:04.891082Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_text = \"We are looking for a dedicated and experienced software engineer to join our team. The ideal candidate will have strong problem-solving skills, extensive knowledge of programming languages, and experience in developing scalable applications. This position offers a competitive salary and a comprehensive benefits package.\"","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:49:10.737862Z","iopub.execute_input":"2024-05-17T12:49:10.73868Z","iopub.status.idle":"2024-05-17T12:49:10.745597Z","shell.execute_reply.started":"2024-05-17T12:49:10.738635Z","shell.execute_reply":"2024-05-17T12:49:10.744055Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_inputs = tokenizer(new_text, padding=\"max_length\", truncation=True, max_length=128, return_tensors=\"pt\")\nnew_inputs = {k: v.to(device) for k, v in new_inputs.items()}","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:49:12.443101Z","iopub.execute_input":"2024-05-17T12:49:12.443507Z","iopub.status.idle":"2024-05-17T12:49:12.453761Z","shell.execute_reply.started":"2024-05-17T12:49:12.443475Z","shell.execute_reply":"2024-05-17T12:49:12.452443Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"with torch.no_grad():\n    new_outputs = model(**new_inputs)\n    new_predictions = torch.argmax(new_outputs.logits, dim=1)\n    print(\"Przewidziana etykieta dla nowego tekstu:\", new_predictions.item())","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:49:14.303602Z","iopub.execute_input":"2024-05-17T12:49:14.304015Z","iopub.status.idle":"2024-05-17T12:49:14.325826Z","shell.execute_reply.started":"2024-05-17T12:49:14.303986Z","shell.execute_reply":"2024-05-17T12:49:14.324685Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Podpunkt B","metadata":{}},{"cell_type":"code","source":"import torch\nfrom transformers import RobertaModel, RobertaTokenizer\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:51:40.472675Z","iopub.execute_input":"2024-05-17T12:51:40.473643Z","iopub.status.idle":"2024-05-17T12:51:40.480649Z","shell.execute_reply.started":"2024-05-17T12:51:40.473608Z","shell.execute_reply":"2024-05-17T12:51:40.479374Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Załaduj wcześniej zdefiniowany model i tokenizer\nmodel_name = 'distilroberta-base'\nmodel = RobertaModel.from_pretrained(model_name)\ntokenizer = RobertaTokenizer.from_pretrained(model_name)\n\n# Ustaw model na eval mode\nmodel.eval()","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:51:42.004053Z","iopub.execute_input":"2024-05-17T12:51:42.004445Z","iopub.status.idle":"2024-05-17T12:51:42.766328Z","shell.execute_reply.started":"2024-05-17T12:51:42.004414Z","shell.execute_reply":"2024-05-17T12:51:42.765284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Funkcja do wyciągania cech\ndef get_features(text, model, tokenizer):\n    inputs = tokenizer(text, return_tensors=\"pt\", padding=True, truncation=True, max_length=128)\n    with torch.no_grad():\n        outputs = model(**inputs)\n        # Wyciągnięcie ostatniej warstwy ukrytej\n        features = outputs.last_hidden_state.mean(dim=1).squeeze().numpy()\n    return features","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:51:50.736725Z","iopub.execute_input":"2024-05-17T12:51:50.737591Z","iopub.status.idle":"2024-05-17T12:51:50.745578Z","shell.execute_reply.started":"2024-05-17T12:51:50.737555Z","shell.execute_reply":"2024-05-17T12:51:50.744368Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Wyciąganie cech dla całego zbioru danych\nX = np.array([get_features(text, model, tokenizer) for text in df['text']])\ny = df['fraudulent']\n\n# Podział na zbiory treningowe i testowe\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T12:51:52.743635Z","iopub.execute_input":"2024-05-17T12:51:52.744557Z","iopub.status.idle":"2024-05-17T13:18:07.698399Z","shell.execute_reply.started":"2024-05-17T12:51:52.744523Z","shell.execute_reply":"2024-05-17T13:18:07.696872Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Trenowanie modelu klasycznego ML (np. regresji logistycznej)\n\nclf = LogisticRegression(max_iter=1000)\nclf.fit(X_train, y_train)\n\n# Ewaluacja modelu\ny_pred = clf.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T13:18:07.701088Z","iopub.execute_input":"2024-05-17T13:18:07.701522Z","iopub.status.idle":"2024-05-17T13:18:14.946356Z","shell.execute_reply.started":"2024-05-17T13:18:07.701484Z","shell.execute_reply":"2024-05-17T13:18:14.944759Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Macierz pomyłek\nconf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"Macierz pomyłek:\")\nprint(conf_matrix)\n\n# Raport klasyfikacji\nclass_report = classification_report(y_test, y_pred)\nprint(\"Raport klasyfikacji:\")\nprint(class_report)","metadata":{"execution":{"iopub.status.busy":"2024-05-17T13:18:14.94836Z","iopub.execute_input":"2024-05-17T13:18:14.949115Z","iopub.status.idle":"2024-05-17T13:18:14.992398Z","shell.execute_reply.started":"2024-05-17T13:18:14.949076Z","shell.execute_reply":"2024-05-17T13:18:14.991257Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Przewidywanie dla nowego tekstu\nnew_text = \"We are looking for a dedicated and experienced software engineer to join our team. The ideal candidate will have strong problem-solving skills, extensive knowledge of programming languages, and experience in developing scalable applications. This position offers a competitive salary and a comprehensive benefits package.\"\nnew_features = get_features(new_text, model, tokenizer)\nnew_pred = clf.predict([new_features])\nprint(\"Przewidziana etykieta dla nowego tekstu:\", new_pred[0])","metadata":{"execution":{"iopub.status.busy":"2024-05-17T13:18:14.995371Z","iopub.execute_input":"2024-05-17T13:18:14.996251Z","iopub.status.idle":"2024-05-17T13:18:15.114159Z","shell.execute_reply.started":"2024-05-17T13:18:14.996207Z","shell.execute_reply":"2024-05-17T13:18:15.11291Z"},"trusted":true},"execution_count":null,"outputs":[]}]}